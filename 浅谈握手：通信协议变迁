# 浅谈握手：通信协议变迁
## 初始通信协议
刚开始通信协议是没有加密概念的，即全程发送明文，后面有人好奇别人发了什么东东就通过抓包等手段抓取数据，这种事情干多了，总会露馅，不愿意暴露自己隐私的人就想到了将自己的数据进行加密，但是加密的目的是让第三方不知道自己发的是什么，总得让接收方知道自己发的是什么吧，于是发送方和接收方就约定，在通信的前几个字节保存密钥，这样的话无论是对方还是自己，收到消息都能很方便的解密，而第三方不知道这个协议的话就很难知道发送的是什么。
## 非对称加密通信协议
初始通信协议没用多久，很快就有很多人知道了协议内容，那些抓包的人也与时共进，抓包之后用前面几个字节的密钥来解密，通信内容继续暴露，开始寻找新的加密方法，非对称加密登上舞台，这种利用数学难题形成的公钥私钥，不惧怕破解。但是为了对方能够解密，需要先把自己通信加密的公钥给对方，所以通信流程就变成了这样：
```
client: hello server//测试通信通道是通的
server: hello client//回复是通的
server: 公钥给你//发送server的公钥
client: 公钥给你//发送client的公钥
```
这个流程叫做握手，握手成功后就开始愉快的通信了。
## 非对称加密+对称加密通信
非对称加密的确保密性很好，但是，但是加解密花费的时间有点多，而且大部分通信是对保密性没有那么高的，咋办，采用非对称加密和对称加密相结合的方式，即用非对称加密来传递密钥，然后采用对称加密的密钥来加密通话，其握手过程就变成这样。
```
client: hello server//测试通信通道是通的
server: hello client//回复是通的
server: 公钥给你//发送server的公钥
client:biubiubiu...........//利用公钥将发送的私钥进行加密
```
握手结束，就开始快乐的通信。
## 非对称加密+对称加密+密钥计算
前面的加密效果的确还行，但是有些人它不走寻常路，他不管你的非对称加密，直接测试对称密钥，因为密钥是一串随机数，所以还是有点危险的。咋办，密钥计算上台，即客户端生成一个随机数，服务器生成一个随机数，客户端再生成一个随机数，双方交换随机数后，将这三个随机数计算出最后的密钥。握手流程就变成这样：
```
client: hello server + 随机数1//测试通信通道是通的
server: hello client + 随机数2//回复是通的
server: 公钥给你//发送server的公钥
client:biubiubiu...........//利用公钥将发送的随机数3进行加密
client计算密钥
server计算密钥
```
然后就快活的通信。。。。。
## 数字证书
道高一尺，魔高一丈，以为高枕无忧的时候，来了中间人攻击，就是我们的握手过程中第三方站了进去，坐在中间，面向`client`的时候假装自己是`server`面向`server`的时候假装自己是`client`，前面的握手过程变成了这样。
```
client: hello server + 随机数1//测试通信通道是通的，其实在半路被bad拦截了下来。
bad: hello server + 随机数1//保存随机数后，又将随机数发给了server
server: hello client + 随机数2//回复是通的，这个更无语，直接回复给bad了。
bad: hello client + 随机数2//保存随机数后，又将随机数发给了client
server: 公钥给你//发送server的公钥，给了bad
bad: 公钥给你//保存公钥后，又自己创建一个密钥，将自己的公钥发给了client
client:biubiubiu...........//利用bad的公钥将发送的随机数3进行加密,还是bad接收
client:biubiubiu...........//bad利用自己的私钥解开密文，然后用server的公钥将明文加密，继续转发给server。
client计算密钥
server计算密钥
bad计算密钥
```